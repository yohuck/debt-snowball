@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using debt_snowball.Utilities


@using debt_snowball.Data
@inject ApplicationDbContext DbContexty




@if (Snowballas != null && Snowballas.Any())
{
    <table class="table-auto text-xs md:text-lg w-[100%] text-left bg-blue-100 p-8 text-blue-950">
        <thead class="bg-blue-950 text-gray-200">
            <tr>
                <th class="p-2">Payment Method</th>
                <th class="p-2">Total of Payments</th>
                <th class="p-2">Total Finance Charge</th>
                <th class="p-2">Total Months</th>
            </tr>
        </thead>
        <tbody class="[&>*:nth-child(even)]:bg-gray-100">
            @if (!isLoading)
            {
               
                    <tr>
                        <td class="p-2 max-w-[120px] overflow-auto">Minimum Payment</td>
                        <td class="p-2 max-w-[120px] overflow-auto">
                            $@(totalInterestPaid + totalDebt)
                        </td>
                    <td class="p-2 max-w-[120px] overflow-auto">$@totalInterestPaid</td>
                        <td class="p-2 max-w-[120px] overflow-auto">@totalMonths</td>
           
                    </tr>
                    <tr>
                        <td class="p-2 max-w-[120px] overflow-auto">$@lastSnowball.ExtraPayment more /Month</td>
                        <td class="p-2 max-w-[120px] overflow-auto">
                           $@(Math.Round(totalPaymentsFromSnowball,2))
                        </td>
                        <td class="p-2 max-w-[120px] overflow-auto">$@totalInterestPaidFromSnowball</td>
                        <td class="p-2 max-w-[120px] overflow-auto">@totalMonthsFromSnowball</td>
                    </tr>
                
            }
            else
            { 
                    <tr>
                        <td class="p-2 max-w-[120px] overflow-auto">Minimum Payment</td>
                        <td class="p-2 max-w-[120px] overflow-auto">
                            @((lastSnowball.Debts?.Count() ?? 0).ToString())
                        </td>
                        <td class="p-2 max-w-[120px] overflow-auto">Calculating...</td>
                        <td class="p-2 max-w-[120px] overflow-auto">Calculating...</td>
                    
                    </tr>
                <tr>
                    <td class="p-2 max-w-[120px] overflow-auto">$@lastSnowball.ExtraPayment more /Month</td>
                    <td class="p-2 max-w-[120px] overflow-auto">
                        Calculating...
                    </td>
                    <td class="p-2 max-w-[120px] overflow-auto">Calculating...</td>
                    <td class="p-2 max-w-[120px] overflow-auto">Calculating...</td>

                </tr>
                
            }
    
        </tbody>
    </table>
    if (isLoading)
    {
        <div class="flex flex-col md:flex-row mt-4">
            <div class="hidden md:block">
                <img src="./yeti.png" alt="Yeti Debt Snowball" class="w-[80%] max-w-[300px] aspect-square" />
            </div>
            <p class="w-full bg-white border-2 border-gray-300 rounded-lg px-4 py-2 -top-10 right-0 mr-2 shadow-lg">
                I'm calculating your savings. Just give me one second. You see, I'm a Yeti and it takes me a little longer to do things. I sure do hate debt though. YARRRRGHHHH.
            </p>
        </div>

      
    }
    else
    {
        <div class="flex flex-col md:flex-row mt-4">
            <div class="hidden md:block">
                <img src="./yeti.png" alt="Yeti Debt Snowball" class="w-[80%] max-w-[300px] aspect-square" />
            </div>
            <p class="w-full bg-white border-2 border-gray-300 rounded-lg px-4 py-2 -top-10 right-0 mr-2 shadow-lg">
               @messageFromYeti
            </p>
        </div>

      
       
    }
}
else
{
    <p>No snowballs found.</p>
}



@code {
    [Parameter]
    public string user { get; set; } = default!;

    double totalDebt;
    double totalPayment;
    double totalInterestPaid;
    double totalPaymentsMade;
    double totalMonths;

    double totalPaymentsFromSnowball;
    double totalInterestPaidFromSnowball;
    double totalMonthsFromSnowball;

    double totalSaved;
    double monthsSaved;

    string messageFromYeti;

    private bool isLoading = false;
    Snowballa lastSnowball;




    public List<Snowballa> Snowballas { get; set; } = default!;



    protected override async Task OnInitializedAsync()
    {   
        isLoading = true;

        if (user != null)
        {
            Snowballas = DbContexty.Snowballas.Where(d => d.User.Id == user).ToList<Snowballa>();
        }

        lastSnowball = Snowballas.Last();

        List<Debt> debts = lastSnowball.Debts.ToList();

        BaseSnowballNumbers startingData = await SnowballProcessor.ProcessSnowball(lastSnowball.ExtraPayment, debts);

        totalDebt = startingData.TotalDebt;
        totalPayment = startingData.TotalPayment;
        totalInterestPaid = startingData.TotalInterestPaid / 100;
        totalPaymentsMade = startingData.TotalPaymentsMade / 100;
        totalMonths = startingData.TotalMonths;



        isLoading = false;


        List<CalculateResponse> test = await SnowballProcessor.CalculateSnowball(lastSnowball.ExtraPayment, debts);

        foreach (CalculateResponse response in test)
        {
            totalPaymentsFromSnowball += response.Amortization.APR.TotalOfPayments / 100;
            totalInterestPaidFromSnowball += response.Amortization.APR.FinanceCharge /100;
        }

        totalMonthsFromSnowball = test.Last<CalculateResponse>().Amortization.AmortizationTable.Count(i => i.AmortizationLineType == "Payment");

        Console.WriteLine("really wow!");

        totalSaved = totalInterestPaid - totalInterestPaidFromSnowball;
        monthsSaved = totalMonths - totalMonthsFromSnowball;
        TalkToYeti talkToYeti = new TalkToYeti();

        string yetiMessage = await talkToYeti.CallYeti(Math.Round(totalSaved,2), monthsSaved);

        messageFromYeti = yetiMessage;

    }
}
